/*
 * File:   main.c
 * Author: CARLOS ESCOBAR
 * LABORATORIO 4 
 * Created on 03 de Agosto de 2023, 04:15 PM
 */
//*****************************************************************************
// Palabra de configuraci?n
//*****************************************************************************
// CONFIG1
#pragma config FOSC = EXTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//*****************************************************************************
// Definici?n e importaci?n de librer?as
//*****************************************************************************
#include <stdint.h>
#include <pic16f887.h>
#include "I2C.h"
#include <xc.h>
#include "LCD_8.h"
//*****************************************************************************
// Definici?n de variables
//*****************************************************************************
#define _XTAL_FREQ 8000000
#define RS RE0
#define EN RE1
uint8_t unidades, decenas, centenas;
uint8_t unidades1, decenas1, centenas1,residuo1;
uint8_t unidades2, decenas2, centenas2,residuo2;
uint8_t unidades_c, decenas_c, centenas_c;
uint8_t adc1, adc2;
uint8_t contador_secuencia=0;
//*****************************************************************************
// Definici?n de funciones para que se puedan colocar despu?s del main de lo 
// contrario hay que colocarlos todas las funciones antes del main
//*****************************************************************************
void setup(void);
void displays(int num);
void displays2(int num);

//*****************************************************************************
// Main
//*****************************************************************************
void main(void) {
    setup();
    
    // Configurar el formato de hora de 24 horas (bit 6 en el registro de horas)
    
    I2C_Master_Start();
    I2C_Master_Write(0xD0); // Dirección del DS3232 en modo escritura (0x68 con el bit R/W en 0)
    I2C_Master_Write(0x02); // Dirección del registro de horas
    I2C_Master_Write(0b01111000); // Configurar el bit 6 para el formato de 12 horas (bit 6 = 0) y dejar el resto en 0
    I2C_Master_Stop();
     __delay_ms(200);
    
    I2C_Master_Start();
I2C_Master_Write(0xD0); // Dirección del DS3232 en modo escritura (0x68 con el bit R/W en 0)
I2C_Master_Write(0x01); // Dirección del registro de minutos
I2C_Master_Write(0x00); // Configurar los minutos a 0 (decimal)
I2C_Master_Stop();
__delay_ms(200);

I2C_Master_Start();
I2C_Master_Write(0xD0); // Dirección del DS3232 en modo escritura (0x68 con el bit R/W en 0)
I2C_Master_Write(0x00); // Dirección del registro de segundos
I2C_Master_Write(0x00); // Configurar los segundos a 0 (decimal)
I2C_Master_Stop();
__delay_ms(200);
    
    while(1){
        I2C_Master_Start();
        I2C_Master_Write(0x50);
        I2C_Master_Write(contador_secuencia);
        I2C_Master_Stop();
        __delay_ms(400);
        
        I2C_Master_Start();
        I2C_Master_Write(0x60);
        I2C_Master_Write(contador_secuencia);
        I2C_Master_Stop();
        __delay_ms(400);
       
        I2C_Master_Start();
        I2C_Master_Write(0x51);
        adc1 = I2C_Master_Read(0); //RECIBE EL VALOR DEL ADC1
        I2C_Master_Stop();
        __delay_ms(200);
        
        I2C_Master_Start();
        I2C_Master_Write(0x61);
        adc2 = I2C_Master_Read(0); //RECIBE EL VALOR DEL ADC 2
        //PORTB = adc2;
        I2C_Master_Stop();
        __delay_ms(200);
        
        contador_secuencia++;   
             
        I2C_Master_Start();
        I2C_Master_Write(0xD1);
        I2C_Master_Write(0x00);
        unidades = I2C_Master_Read(0);
        I2C_Master_Stop();
        __delay_ms(200);
        
        I2C_Master_Start();
        I2C_Master_Write(0xD1);
        I2C_Master_Write(0x01);
        decenas = I2C_Master_Read(0);
        I2C_Master_Stop();
        __delay_ms(200);
        
        I2C_Master_Start();
        I2C_Master_Write(0xD1);
        I2C_Master_Write(0x02);
        centenas = I2C_Master_Read(0);
        I2C_Master_Stop();
        __delay_ms(200);
        
        //PORTB = unidades;
         unidades_c = (unidades * 59) / 255;
         decenas_c = (decenas * 59) / 255;
        centenas_c = (centenas * 24) / 255;
        
        displays(adc1);
        displays2(adc2);
        
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Voltaje Pot");
         __delay_ms(200);
        /*Lcd_Set_Cursor(2,1);
        char valor_c = centenas1 + '0';
        Lcd_Write_Char(valor_c);
        
        Lcd_Set_Cursor(2,2);
        Lcd_Write_Char('.');
      
        Lcd_Set_Cursor(2,3);
        char valor_d = decenas1 + '0';
        Lcd_Write_Char(valor_d);
        
        Lcd_Set_Cursor(2,4);
        char valor_u = unidades1 + '0';
        Lcd_Write_Char(valor_u);
         __delay_ms(500);*/

    
    }
    return;
}
//*****************************************************************************
// Funci?n de Inicializaci?n
//*****************************************************************************
void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISB = 0;
    TRISD = 0;
    TRISE = 0;
    PORTB = 0;
    PORTD = 0;
    PORTE=0;
    I2C_Master_Init(100000);        // Inicializar Comuncaci?n I2C
}
void displays(int num)
{
    centenas1= (uint8_t)(num/100);
    residuo1 = num%100;
    
    decenas1 = residuo1 /10;
    residuo1 = residuo1 % 10;
    
    unidades1 = residuo1;
    return;
    
}

void displays2(int num)
{
    centenas2= (uint8_t)(num/100);
    residuo2 = num%100;
    
    decenas2 = residuo2 /10;
    residuo2 = residuo2 % 10;
    
    unidades2 = residuo2;
    return;
    
}
